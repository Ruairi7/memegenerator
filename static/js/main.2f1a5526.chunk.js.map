{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","MemeGenerator","props","state","topText","bottomText","randomImage","isLoaded","allMemeImgs","handleChange","bind","handleClick","fetch","then","response","json","memes","data","setState","e","target","name","value","this","preventDefault","max","length","num","Math","floor","random","url","className","onSubmit","type","placeholder","onChange","onClick","src","alt","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAWeA,MATf,WACI,OACI,iCACI,kD,0CCmGGC,E,kDAnGX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,UAAU,EACVC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAXL,E,qDAuBlB,WAAoB,IAAD,OAEfE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAACV,YAAaQ,S,0BASpC,SAAaG,GAAG,IAAD,EACWA,EAAEC,OAAjBC,EADI,EACJA,KAAMC,EADF,EACEA,MACbC,KAAKL,SAAL,eACKG,EAAMC,M,yBASf,SAAYH,GACRA,EAAEK,iBACF,IAAMC,EAAMF,KAAKpB,MAAMK,YAAYkB,OAC7BC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWL,GAClCM,EAAMR,KAAKpB,MAAMK,YAAYmB,GAAKI,IACxCR,KAAKL,SAAS,CAACZ,YAAayB,M,oBAGhC,WAEI,OACI,gCACI,uBAAMC,UAAU,YAAYC,SAAUV,KAAKZ,YAA3C,UAQI,uBACAuB,KAAK,OACLb,KAAK,UACLC,MAAOC,KAAKpB,MAAMC,QAClB+B,YAAY,UACZC,SAAUb,KAAKd,eAEf,uBACAyB,KAAK,OACLb,KAAK,aACLC,MAAOC,KAAKpB,MAAME,WAClB8B,YAAc,aACdC,SAAUb,KAAKd,eAGf,wBAAQ4B,QAASd,KAAKZ,YAAtB,oBAEJ,sBAAKqB,UAAU,OAAf,UACI,qBAAKM,IAAKf,KAAKpB,MAAMG,YAAaiC,IAAI,KACtC,oBAAIP,UAAU,MAAd,SAAqBT,KAAKpB,MAAMC,UAChC,oBAAI4B,UAAU,SAAd,SAAwBT,KAAKpB,MAAME,uB,GA3F3BmC,IAAMC,WCUnBC,MAVf,WAEI,OACE,iCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCGKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2f1a5526.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n    return(\r\n        <header>\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header\r\n","// MemeGenerator will be calling to an API and holding on to data\r\n// need class component for this\r\nimport React from 'react'\r\n\r\nclass MemeGenerator extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        //needs state\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n            isLoaded: false,\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    \r\n    /**\r\n     * We'll be using an API that provides a bunch of meme images.\r\n     * \r\n     * Your task:\r\n     * make an API call to \"https://api.imgflip.com/get_memes\" and save the \r\n     * data that comes back (`response.data.memes`) to a new state property\r\n     * called `allMemeImgs`. (The data that comes back is an array)\r\n     */\r\n    \r\n    componentDidMount(){\r\n        //fetch data\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const {memes} = response.data\r\n            this.setState({allMemeImgs: memes})\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Create the onChagne handler method\r\n     * It should update the corresponding state on every change of the input box\r\n     */\r\n    \r\n    handleChange(e){\r\n        const {name, value} = e.target\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Create a method that, when the \"Gen\" button is clicked, chooses one of the\r\n     * memes from our `allMemeImgs` array at random and makes it so that is the\r\n     * meme image that shows up in the bottom portion of our meme generator site (`.url`)\r\n     */\r\n    handleClick(e){\r\n        e.preventDefault()\r\n        const max = this.state.allMemeImgs.length\r\n        const num =  Math.floor(Math.random() * max)\r\n        const url = this.state.allMemeImgs[num].url\r\n        this.setState({randomImage: url})\r\n    }\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleClick}>\r\n                    {\r\n                        /**\r\n                         * Create 2 input fields, one for the topText and one for the bottomText\r\n                         * Remember that these will be \"controlled forms\", so make sure to add\r\n                         * all the attributes you'll need for that to work\r\n                         */\r\n                    }  \r\n                    <input \r\n                    type=\"text\" \r\n                    name=\"topText\" \r\n                    value={this.state.topText} \r\n                    placeholder=\"topText\"\r\n                    onChange={this.handleChange}\r\n                    />\r\n                    <input \r\n                    type=\"text\" \r\n                    name=\"bottomText\" \r\n                    value={this.state.bottomText} \r\n                    placeholder = \"bottomText\"\r\n                    onChange={this.handleChange}\r\n                    />\r\n                \r\n                    <button onClick={this.handleClick}>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImage} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MemeGenerator\r\n","import './App.css';\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator';\n\nfunction App() {\n  \n    return (\n      <main>\n          <Header />\n          <MemeGenerator />\n      </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}